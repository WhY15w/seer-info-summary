#!/usr/bin/env node
require("dotenv").config();
const http = require("http");
const debug = require("debug")("backend:server");

const db = require("../db/db");
const app = require("../app");
const config = require("../config/config");

const startServer = () => {
  const port = normalizePort(config.port || "3000");
  app.set("port", port);

  const server = http.createServer(app);

  server.listen(port);
  server.on("error", (error) => onError(error, port));
  server.on("listening", () => onListening(server));
};

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // valid port number
  return false;
}

/**
 * Handle server error event.
 */
function onError(error, port) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Handle server listening event.
 */
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

// Connect to DB and start the server
db(startServer);
